// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package v1beta1

import protection "github.com/crossplane/crossplane/internal/protection"

type GeneratedResourceConverter struct{}

func (c *GeneratedResourceConverter) FromInternal(source protection.Resource) Resource {
	var v1beta1Resource Resource
	v1beta1Resource.APIVersion = source.APIVersion
	v1beta1Resource.Kind = source.Kind
	v1beta1Resource.ResourceRef = c.pProtectionResourceRefToPV1beta1ResourceRef(source.ResourceRef)
	v1beta1Resource.ResourceSelector = c.pProtectionResourceSelectorToPV1beta1ResourceSelector(source.ResourceSelector)
	return v1beta1Resource
}
func (c *GeneratedResourceConverter) ToInternal(source Resource) protection.Resource {
	var protectionResource protection.Resource
	protectionResource.APIVersion = source.APIVersion
	protectionResource.Kind = source.Kind
	protectionResource.ResourceRef = c.pV1beta1ResourceRefToPProtectionResourceRef(source.ResourceRef)
	protectionResource.ResourceSelector = c.pV1beta1ResourceSelectorToPProtectionResourceSelector(source.ResourceSelector)
	return protectionResource
}
func (c *GeneratedResourceConverter) ToInternalResourceRef(source ResourceRef) protection.ResourceRef {
	var protectionResourceRef protection.ResourceRef
	protectionResourceRef.Name = source.Name
	return protectionResourceRef
}
func (c *GeneratedResourceConverter) ToInternalResourceSelector(source ResourceSelector) protection.ResourceSelector {
	var protectionResourceSelector protection.ResourceSelector
	if source.MatchLabels != nil {
		protectionResourceSelector.MatchLabels = make(map[string]string, len(source.MatchLabels))
		for key, value := range source.MatchLabels {
			protectionResourceSelector.MatchLabels[key] = value
		}
	}
	if source.MatchControllerRef != nil {
		xbool := *source.MatchControllerRef
		protectionResourceSelector.MatchControllerRef = &xbool
	}
	return protectionResourceSelector
}
func (c *GeneratedResourceConverter) pProtectionResourceRefToPV1beta1ResourceRef(source *protection.ResourceRef) *ResourceRef {
	var pV1beta1ResourceRef *ResourceRef
	if source != nil {
		var v1beta1ResourceRef ResourceRef
		v1beta1ResourceRef.Name = (*source).Name
		pV1beta1ResourceRef = &v1beta1ResourceRef
	}
	return pV1beta1ResourceRef
}
func (c *GeneratedResourceConverter) pProtectionResourceSelectorToPV1beta1ResourceSelector(source *protection.ResourceSelector) *ResourceSelector {
	var pV1beta1ResourceSelector *ResourceSelector
	if source != nil {
		var v1beta1ResourceSelector ResourceSelector
		if (*source).MatchLabels != nil {
			v1beta1ResourceSelector.MatchLabels = make(map[string]string, len((*source).MatchLabels))
			for key, value := range (*source).MatchLabels {
				v1beta1ResourceSelector.MatchLabels[key] = value
			}
		}
		if (*source).MatchControllerRef != nil {
			xbool := *(*source).MatchControllerRef
			v1beta1ResourceSelector.MatchControllerRef = &xbool
		}
		pV1beta1ResourceSelector = &v1beta1ResourceSelector
	}
	return pV1beta1ResourceSelector
}
func (c *GeneratedResourceConverter) pV1beta1ResourceRefToPProtectionResourceRef(source *ResourceRef) *protection.ResourceRef {
	var pProtectionResourceRef *protection.ResourceRef
	if source != nil {
		protectionResourceRef := c.ToInternalResourceRef((*source))
		pProtectionResourceRef = &protectionResourceRef
	}
	return pProtectionResourceRef
}
func (c *GeneratedResourceConverter) pV1beta1ResourceSelectorToPProtectionResourceSelector(source *ResourceSelector) *protection.ResourceSelector {
	var pProtectionResourceSelector *protection.ResourceSelector
	if source != nil {
		protectionResourceSelector := c.ToInternalResourceSelector((*source))
		pProtectionResourceSelector = &protectionResourceSelector
	}
	return pProtectionResourceSelector
}
