//
//Copyright 2022 The Crossplane Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Generated from apis/apiextensions/fn/proto/v1/run_function.proto by ./hack/duplicate_proto_type.sh. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: apis/apiextensions/fn/proto/v1beta1/zz_generated_run_function.proto

//buf:lint:ignore PACKAGE_DIRECTORY_MATCH // Too late to fix this now.

package v1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FunctionRunnerService_RunFunction_FullMethodName = "/apiextensions.fn.proto.v1beta1.FunctionRunnerService/RunFunction"
)

// FunctionRunnerServiceClient is the client API for FunctionRunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunctionRunnerServiceClient interface {
	// RunFunction runs the Composition Function.
	RunFunction(ctx context.Context, in *RunFunctionRequest, opts ...grpc.CallOption) (*RunFunctionResponse, error)
}

type functionRunnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFunctionRunnerServiceClient(cc grpc.ClientConnInterface) FunctionRunnerServiceClient {
	return &functionRunnerServiceClient{cc}
}

func (c *functionRunnerServiceClient) RunFunction(ctx context.Context, in *RunFunctionRequest, opts ...grpc.CallOption) (*RunFunctionResponse, error) {
	out := new(RunFunctionResponse)
	err := c.cc.Invoke(ctx, FunctionRunnerService_RunFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunctionRunnerServiceServer is the server API for FunctionRunnerService service.
// All implementations must embed UnimplementedFunctionRunnerServiceServer
// for forward compatibility
type FunctionRunnerServiceServer interface {
	// RunFunction runs the Composition Function.
	RunFunction(context.Context, *RunFunctionRequest) (*RunFunctionResponse, error)
	mustEmbedUnimplementedFunctionRunnerServiceServer()
}

// UnimplementedFunctionRunnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFunctionRunnerServiceServer struct {
}

func (UnimplementedFunctionRunnerServiceServer) RunFunction(context.Context, *RunFunctionRequest) (*RunFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunFunction not implemented")
}
func (UnimplementedFunctionRunnerServiceServer) mustEmbedUnimplementedFunctionRunnerServiceServer() {}

// UnsafeFunctionRunnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunctionRunnerServiceServer will
// result in compilation errors.
type UnsafeFunctionRunnerServiceServer interface {
	mustEmbedUnimplementedFunctionRunnerServiceServer()
}

func RegisterFunctionRunnerServiceServer(s grpc.ServiceRegistrar, srv FunctionRunnerServiceServer) {
	s.RegisterService(&FunctionRunnerService_ServiceDesc, srv)
}

func _FunctionRunnerService_RunFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionRunnerServiceServer).RunFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionRunnerService_RunFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionRunnerServiceServer).RunFunction(ctx, req.(*RunFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FunctionRunnerService_ServiceDesc is the grpc.ServiceDesc for FunctionRunnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FunctionRunnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiextensions.fn.proto.v1beta1.FunctionRunnerService",
	HandlerType: (*FunctionRunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunFunction",
			Handler:    _FunctionRunnerService_RunFunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/apiextensions/fn/proto/v1beta1/zz_generated_run_function.proto",
}
