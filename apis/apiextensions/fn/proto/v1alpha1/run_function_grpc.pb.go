// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: apiextensions/fn/proto/v1alpha1/run_function.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContainerizedFunctionRunnerServiceClient is the client API for ContainerizedFunctionRunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerizedFunctionRunnerServiceClient interface {
	// RunFunction runs a containerized function.
	RunFunction(ctx context.Context, in *RunFunctionRequest, opts ...grpc.CallOption) (*RunFunctionResponse, error)
}

type containerizedFunctionRunnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerizedFunctionRunnerServiceClient(cc grpc.ClientConnInterface) ContainerizedFunctionRunnerServiceClient {
	return &containerizedFunctionRunnerServiceClient{cc}
}

func (c *containerizedFunctionRunnerServiceClient) RunFunction(ctx context.Context, in *RunFunctionRequest, opts ...grpc.CallOption) (*RunFunctionResponse, error) {
	out := new(RunFunctionResponse)
	err := c.cc.Invoke(ctx, "/apiextensions.fn.proto.v1alpha1.ContainerizedFunctionRunnerService/RunFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerizedFunctionRunnerServiceServer is the server API for ContainerizedFunctionRunnerService service.
// All implementations must embed UnimplementedContainerizedFunctionRunnerServiceServer
// for forward compatibility
type ContainerizedFunctionRunnerServiceServer interface {
	// RunFunction runs a containerized function.
	RunFunction(context.Context, *RunFunctionRequest) (*RunFunctionResponse, error)
	mustEmbedUnimplementedContainerizedFunctionRunnerServiceServer()
}

// UnimplementedContainerizedFunctionRunnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContainerizedFunctionRunnerServiceServer struct {
}

func (UnimplementedContainerizedFunctionRunnerServiceServer) RunFunction(context.Context, *RunFunctionRequest) (*RunFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunFunction not implemented")
}
func (UnimplementedContainerizedFunctionRunnerServiceServer) mustEmbedUnimplementedContainerizedFunctionRunnerServiceServer() {
}

// UnsafeContainerizedFunctionRunnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerizedFunctionRunnerServiceServer will
// result in compilation errors.
type UnsafeContainerizedFunctionRunnerServiceServer interface {
	mustEmbedUnimplementedContainerizedFunctionRunnerServiceServer()
}

func RegisterContainerizedFunctionRunnerServiceServer(s grpc.ServiceRegistrar, srv ContainerizedFunctionRunnerServiceServer) {
	s.RegisterService(&ContainerizedFunctionRunnerService_ServiceDesc, srv)
}

func _ContainerizedFunctionRunnerService_RunFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerizedFunctionRunnerServiceServer).RunFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiextensions.fn.proto.v1alpha1.ContainerizedFunctionRunnerService/RunFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerizedFunctionRunnerServiceServer).RunFunction(ctx, req.(*RunFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainerizedFunctionRunnerService_ServiceDesc is the grpc.ServiceDesc for ContainerizedFunctionRunnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerizedFunctionRunnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiextensions.fn.proto.v1alpha1.ContainerizedFunctionRunnerService",
	HandlerType: (*ContainerizedFunctionRunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunFunction",
			Handler:    _ContainerizedFunctionRunnerService_RunFunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apiextensions/fn/proto/v1alpha1/run_function.proto",
}
