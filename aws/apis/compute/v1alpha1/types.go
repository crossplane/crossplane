/*
Copyright 2019 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	runtimev1alpha1 "github.com/crossplaneio/crossplane-runtime/apis/core/v1alpha1"
	"github.com/crossplaneio/crossplane-runtime/pkg/resource"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Cluster statuses.
const (
	// The resource is inaccessible while it is being created.
	ClusterStatusCreating = "CREATING"
	ClusterStatusActive   = "ACTIVE"

	// TODO: Deleting and Failed currently not used. Implement usage or remove
	// ClusterStatusDeleting = "DELETING"
	// ClusterStatusFailed = "FAILED"
)

// EKSRegion represents an EKS enabled AWS region.
type EKSRegion string

// EKS regions.
const (
	// EKSRegionUSWest2 - us-west-2 (Oregon) region for eks cluster
	EKSRegionUSWest2 EKSRegion = "us-west-2"
	// EKSRegionUSEast1 - us-east-1 (N. Virginia) region for eks cluster
	EKSRegionUSEast1 EKSRegion = "us-east-1"
	// EKSRegionUSEast2 - us-east-2 (Ohio) region for eks worker only
	EKSRegionUSEast2 EKSRegion = "us-east-2"
	// EKSRegionEUWest1 - eu-west-1 (Ireland) region for eks cluster
	EKSRegionEUWest1 EKSRegion = "eu-west-1"
)

// EKSClusterParameters defines the desired state of EKSCluster
type EKSClusterParameters struct {
	// Configuration of this Spec is dependent on the readme as described here
	// https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html

	// Region for EKS Cluster
	// +kubebuilder:validation:Enum=us-west-2;us-east-1;eu-west-1
	Region EKSRegion `json:"region"`

	// RoleARN --role-arn
	// The Amazon Resource Name (ARN) of the IAM role that provides permis-
	// sions for Amazon EKS to make calls to other AWS  API  operations  on
	// your  behalf.  For more information, see Amazon EKS Service IAM Role
	// in the * Amazon EKS User Guide * .
	// TODO: we could simplify this to roleName.
	RoleARN string `json:"roleARN"`

	// ResourcesVPCConfig --resources-vpc-config (structure)
	// The VPC subnets and security groups  used  by  the  cluster  control
	// plane.  Amazon  EKS VPC resources have specific requirements to work
	// properly with Kubernetes. For more information, see Cluster VPC Con-
	// siderations  and Cluster Security Group Considerations in the Amazon
	// EKS User Guide . You must specify at  least  two  subnets.  You  may
	// specify  up  to  5  security groups, but we recommend that you use a
	// dedicated security group for your cluster control plane.
	//
	// VpcID of EKS cluster
	VpcID string `json:"vpcId"`
	// SubnetIds
	// Syntax:
	// subnetIds=string,string,
	SubnetIds []string `json:"subnetIds"`
	// SecurityGroupIds
	// Syntax:
	// securityGroupIds=string,string,
	SecurityGroupIds []string `json:"securityGroupIds"`

	// ClientRequestToken
	// --client-request-token (string)
	// Unique, case-sensitive identifier you provide to ensure the  idempo-
	// tency of the request.
	ClientRequestToken string `json:"clientRequestToken,omitempty"`

	// ClusterVersion --kubernetes-version (string)
	// The desired Kubernetes version for your cluster. If you do not spec-
	// ify a value here, the latest version  available  in  Amazon  EKS  is
	// used.
	ClusterVersion string `json:"clusterVersion,omitempty"`

	// CLIInput --cli-input-json  (string) Performs service operation based on the JSON
	// string provided. The JSON string follows the format provided by  --gen-
	// erate-cli-skeleton.  If  other  arguments  are  provided on the command
	// line, the CLI values will override the JSON-provided values. It is  not
	// possible to pass arbitrary binary values using a JSON-provided value as
	// the string will be taken literally.
	CLIInput string `json:"cliInput,omitempty"`

	// GenerateCLISkeleton --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
	// output without sending an API request. If provided with no value or the
	// value input, prints a sample input JSON that can be used as an argument
	// for  --cli-input-json.  If provided with the value output, it validates
	// the command inputs and returns a sample output JSON for that command.
	GenerateCLISkeleton string `json:"generateCLISkeleton,omitempty"`

	// WorkerNodes configuration for cloudformation
	WorkerNodes WorkerNodesSpec `json:"workerNodes"`

	// MapRoles - each item maps an aws role to kubernetes groups
	// Default role that allows nodes access to communicate with master is autogenerated when a node pool comes online.
	// Additional map roles configuration are documented in the link below
	// https://github.com/kubernetes-sigs/aws-iam-authenticator/blob/master/README.md
	//
	//# map arn:aws:iam::000000000000:role/KubernetesAdmin to cluster admin
	// - rolearn: arn:aws:iam::000000000000:role/KubernetesAdmin
	//   username: kubernetes-admin
	//    groups:
	//      - system:masters
	MapRoles []MapRole `json:"mapRoles,omitempty"`

	// MapUsers - each item maps an aws users to kubernetes groups
	// Additional map users configuration options are documented in the link below
	// https://github.com/kubernetes-sigs/aws-iam-authenticator/blob/master/README.md
	//
	//# map user IAM user Alice in 000000000000 to user "alice" in group "system:masters"
	//- userarn: arn:aws:iam::000000000000:user/Alice
	//  username: alice
	//  groups:
	//    - system:masters
	MapUsers []MapUser `json:"mapUsers,omitempty"`
}

// EKSClusterSpec specifies the configuration for an EKS cluster.
type EKSClusterSpec struct {
	runtimev1alpha1.ResourceSpec `json:",inline"`
	EKSClusterParameters         `json:",inline"`
}

// MapRole maps an aws role to kubernetes groups
// see: https://docs.aws.amazon.com/eks/latest/userguide/add-user-role.html
// https://github.com/kubernetes-sigs/aws-iam-authenticator/blob/master/README.md
type MapRole struct {
	RoleARN  string   `json:"rolearn"`
	Username string   `json:"username"`
	Groups   []string `json:"groups"`
}

// MapUser maps an aws user to kubernetes groups
// see: https://docs.aws.amazon.com/eks/latest/userguide/add-user-role.html
// https://github.com/kubernetes-sigs/aws-iam-authenticator/blob/master/README.md
type MapUser struct {
	UserARN  string   `json:"userarn"`
	Username string   `json:"username"`
	Groups   []string `json:"groups"`
}

//WorkerNodesSpec - Worker node spec used to define cloudformation template that provisions workers for cluster
type WorkerNodesSpec struct {
	// KeyName The EC2 Key Pair to allow SSH access to the instances
	KeyName string `json:"keyName"`

	// NodeImageId The EC2 Key Pair to allow SSH access to the instances
	// defaults to region standard AMI
	NodeImageID string `json:"nodeImageId,omitempty"`

	// NodeInstanceType EC2 instance type for the node instances
	// +kubebuilder:validation:Enum=t2.small;t2.medium;t2.large;t2.xlarge;t2.2xlarge;t3.nano;t3.micro;t3.small;t3.medium;t3.large;t3.xlarge;t3.2xlarge;m3.medium;m3.large;m3.xlarge;m3.2xlarge;m4.large;m4.xlarge;m4.2xlarge;m4.4xlarge;m4.10xlarge;m5.large;m5.xlarge;m5.2xlarge;m5.4xlarge;m5.12xlarge;m5.24xlarge;c4.large;c4.xlarge;c4.2xlarge;c4.4xlarge;c4.8xlarge;c5.large;c5.xlarge;c5.2xlarge;c5.4xlarge;c5.9xlarge;c5.18xlarge;i3.large;i3.xlarge;i3.2xlarge;i3.4xlarge;i3.8xlarge;i3.16xlarge;r3.xlarge;r3.2xlarge;r3.4xlarge;r3.8xlarge;r4.large;r4.xlarge;r4.2xlarge;r4.4xlarge;r4.8xlarge;r4.16xlarge;x1.16xlarge;x1.32xlarge;p2.xlarge;p2.8xlarge;p2.16xlarge;p3.2xlarge;p3.8xlarge;p3.16xlarge;r5.large;r5.xlarge;r5.2xlarge;r5.4xlarge;r5.12xlarge;r5.24xlarge;r5d.large;r5d.xlarge;r5d.2xlarge;r5d.4xlarge;r5d.12xlarge;r5d.24xlarge;z1d.large;z1d.xlarge;z1d.2xlarge;z1d.3xlarge;z1d.6xlarge;z1d.12xlarge
	NodeInstanceType string `json:"nodeInstanceType"`

	// NodeAutoScalingGroupMinSize Minimum size of Node Group ASG.
	// default 1
	NodeAutoScalingGroupMinSize *int `json:"nodeAutoScalingGroupMinSize,omitempty"`

	// NodeAutoScalingGroupMaxSize Maximum size of Node Group ASG.
	// Default: 3
	NodeAutoScalingGroupMaxSize *int `json:"nodeAutoScalingGroupMaxSize,omitempty"`

	// NodeVolumeSize Node volume size in GB
	// Default: 20
	NodeVolumeSize *int `json:"nodeVolumeSize,omitempty"`

	// BootstrapArguments Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
	// Default: ""
	BootstrapArguments string `json:"bootstrapArguments,omitempty"`

	// NodeGroupName Unique identifier for the Node Group.
	NodeGroupName string `json:"nodeGroupName,omitempty"`

	// ClusterControlPlaneSecurityGroup The security group of the cluster control plane.
	ClusterControlPlaneSecurityGroup string `json:"clusterControlPlaneSecurityGroup,omitempty"`
}

// EKSClusterStatus schema of the status of eks cluster
type EKSClusterStatus struct {
	runtimev1alpha1.ResourceStatus `json:",inline"`

	// State of the cluster (see status constants above)
	State string `json:"state,omitempty"`
	// ClusterName identifier
	ClusterName string `json:"resourceName,omitempty"`
	// ClusterVersion identifier
	ClusterVersion string `json:"resourceVersion,omitempty"`
	// Endpoint for cluster
	Endpoint string `json:"endpoint,omitempty"`
	// CloudFormationStackID Stack-id
	CloudFormationStackID string `json:"cloudformationStackId,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// EKSCluster is the Schema for the resources API
// +kubebuilder:printcolumn:name="STATUS",type="string",JSONPath=".status.bindingPhase"
// +kubebuilder:printcolumn:name="STATE",type="string",JSONPath=".status.state"
// +kubebuilder:printcolumn:name="CLUSTER-NAME",type="string",JSONPath=".status.clusterName"
// +kubebuilder:printcolumn:name="ENDPOINT",type="string",JSONPath=".status.endpoint"
// +kubebuilder:printcolumn:name="CLUSTER-CLASS",type="string",JSONPath=".spec.classRef.name"
// +kubebuilder:printcolumn:name="LOCATION",type="string",JSONPath=".spec.location"
// +kubebuilder:printcolumn:name="RECLAIM-POLICY",type="string",JSONPath=".spec.reclaimPolicy"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
type EKSCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   EKSClusterSpec   `json:"spec,omitempty"`
	Status EKSClusterStatus `json:"status,omitempty"`
}

// SetBindingPhase of this EKSCluster.
func (c *EKSCluster) SetBindingPhase(p runtimev1alpha1.BindingPhase) {
	c.Status.SetBindingPhase(p)
}

// GetBindingPhase of this EKSCluster.
func (c *EKSCluster) GetBindingPhase() runtimev1alpha1.BindingPhase {
	return c.Status.GetBindingPhase()
}

// SetConditions of this EKSCluster.
func (c *EKSCluster) SetConditions(cd ...runtimev1alpha1.Condition) {
	c.Status.SetConditions(cd...)
}

// SetClaimReference of this EKSCluster.
func (c *EKSCluster) SetClaimReference(r *corev1.ObjectReference) {
	c.Spec.ClaimReference = r
}

// GetClaimReference of this EKSCluster.
func (c *EKSCluster) GetClaimReference() *corev1.ObjectReference {
	return c.Spec.ClaimReference
}

// SetClassReference of this EKSCluster.
func (c *EKSCluster) SetClassReference(r *corev1.ObjectReference) {
	c.Spec.ClassReference = r
}

// GetClassReference of this EKSCluster.
func (c *EKSCluster) GetClassReference() *corev1.ObjectReference {
	return c.Spec.ClassReference
}

// SetWriteConnectionSecretToReference of this EKSCluster.
func (c *EKSCluster) SetWriteConnectionSecretToReference(r corev1.LocalObjectReference) {
	c.Spec.WriteConnectionSecretToReference = r
}

// GetWriteConnectionSecretToReference of this EKSCluster.
func (c *EKSCluster) GetWriteConnectionSecretToReference() corev1.LocalObjectReference {
	return c.Spec.WriteConnectionSecretToReference
}

// GetReclaimPolicy of this EKSCluster.
func (c *EKSCluster) GetReclaimPolicy() runtimev1alpha1.ReclaimPolicy {
	return c.Spec.ReclaimPolicy
}

// SetReclaimPolicy of this EKSCluster.
func (c *EKSCluster) SetReclaimPolicy(p runtimev1alpha1.ReclaimPolicy) {
	c.Spec.ReclaimPolicy = p
}

// +kubebuilder:object:root=true

// EKSClusterList contains a list of EKSCluster items
type EKSClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EKSCluster `json:"items"`
}

// EKSClusterClassSpecTemplate is the Schema for the resource class
type EKSClusterClassSpecTemplate struct {
	runtimev1alpha1.ResourceClassSpecTemplate `json:",inline"`
	EKSClusterParameters                      `json:",inline"`
}

var _ resource.Class = &EKSClusterClass{}

// +kubebuilder:object:root=true

// EKSClusterClass is the Schema for the resource class
// +kubebuilder:printcolumn:name="PROVIDER-REF",type="string",JSONPath=".specTemplate.providerRef.name"
// +kubebuilder:printcolumn:name="RECLAIM-POLICY",type="string",JSONPath=".specTemplate.reclaimPolicy"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
type EKSClusterClass struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	SpecTemplate EKSClusterClassSpecTemplate `json:"specTemplate,omitempty"`
}

// GetReclaimPolicy of this EKSClusterClass.
func (i *EKSClusterClass) GetReclaimPolicy() runtimev1alpha1.ReclaimPolicy {
	return i.SpecTemplate.ReclaimPolicy
}

// SetReclaimPolicy of this EKSClusterClass.
func (i *EKSClusterClass) SetReclaimPolicy(p runtimev1alpha1.ReclaimPolicy) {
	i.SpecTemplate.ReclaimPolicy = p
}

// +kubebuilder:object:root=true

// EKSClusterClassList contains a list of cloud memorystore resource classes.
type EKSClusterClassList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EKSClusterClass `json:"items"`
}
